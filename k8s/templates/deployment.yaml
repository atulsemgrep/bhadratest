apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "33"
    meta.helm.sh/release-name: bhadra
    meta.helm.sh/release-namespace: {{.Values.namespace}}
    moniker.spinnaker.io/application: stage-{{.Values.namespace}}
  generation: 23
  labels:
    app.kubernetes.io/instance: bhadra
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bhadra
    bhadra.org/component: celery
    helm.sh/chart: bhadra-1.4.3
  name: bhadra-celery-beat
  namespace: {{.Values.namespace}}
spec:
  progressDeadlineSeconds: 600
  replicas: 6
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: bhadra
      app.kubernetes.io/name: bhadra
      bhadra.org/component: celery
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: bhadra
        app.kubernetes.io/name: bhadra
        bhadra.org/component: celery
    spec:
      containers:
      - command:
        - /entrypoint-celery-beat.sh
        env:
        - name: DD_DATABASE_PASSWORD
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: DD_SECRET_KEY
              name: bhadra
        - name: DD_SECRET_KEY
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: DD_SECRET_KEY
              name: bhadra
        envFrom:
        - configMapRef:
            name: bhadra
        image: <IMAGENAME>
        imagePullPolicy: IfNotPresent
        name: celery
        resources:
          limits:
            cpu: "2"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: Default
      imagePullSecrets:
      - name: registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "35"
    meta.helm.sh/release-name: bhadra
    meta.helm.sh/release-namespace: {{.Values.namespace}}
    moniker.spinnaker.io/application: stage-{{.Values.namespace}}
  generation: 24
  labels:
    app.kubernetes.io/instance: bhadra
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bhadra
    bhadra.org/component: celery
    helm.sh/chart: bhadra-1.4.3
  name: bhadra-celery-worker
  namespace: {{.Values.namespace}}
spec:
  progressDeadlineSeconds: 600
  replicas: 10
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: bhadra
      app.kubernetes.io/name: bhadra
      bhadra.org/component: celery
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: bhadra
        app.kubernetes.io/name: bhadra
        bhadra.org/component: celery
    spec:
      containers:
      - command:
        - /entrypoint-celery-worker.sh
        env:
        - name: DD_DATABASE_PASSWORD
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: BHADRA_DB_PASSWORD
              name: bhadra
        - name: DD_SECRET_KEY
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: DD_SECRET_KEY
              name: bhadra
        envFrom:
        - configMapRef:
            name: bhadra
        image: <Image name>
        imagePullPolicy: IfNotPresent
        name: celery
        resources:
          limits:
            cpu: "2"
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: Default
      imagePullSecrets:
      - name: registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "51"
    meta.helm.sh/release-name: bhadra
    meta.helm.sh/release-namespace: {{.Values.namespace}}
    moniker.spinnaker.io/application: stage-{{.Values.namespace}}
  generation: 31
  labels:
    app.kubernetes.io/instance: bhadra
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bhadra
    bhadra.org/component: django
    helm.sh/chart: bhadra-1.4.3
  name: bhadra-django
  namespace: {{.Values.namespace}}
spec:
  progressDeadlineSeconds: 600
  replicas: 6
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: bhadra
      app.kubernetes.io/name: bhadra
      bhadra.org/component: django
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: bhadra
        app.kubernetes.io/name: bhadra
        bhadra.org/component: django
    spec:
      containers:
      - env:
        - name: DD_DATABASE_PASSWORD
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: BHADRA_DB_PASSWORD
              name: bhadra
        - name: DD_SECRET_KEY
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: DD_SECRET_KEY
              name: bhadra
        - name: DD_CREDENTIAL_AES_256_KEY
          valueFrom: # Create a secret and use it here
            secretKeyRef:
              key: DD_CREDENTIAL_AES_256_KEY
              name: bhadra
        - name: DD_SESSION_COOKIE_SECURE
          value: "False"
        - name: DD_CSRF_COOKIE_SECURE
          value: "False"
        - name: DD_DEBUG
          value: "False"
        - name: DD_SAML2_ASSERTION_URL
          value: https://{{.Values.host}}
        - name: DD_SITE_URL
          value: https://{{.Values.host}}
        - name: DD_SAML2_ENTITY_ID
          value: <VAULE> Use this value for saml integration 
        envFrom:
        - configMapRef:
            name: bhadra
        image: <IMAGENAME>
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            httpHeaders:
            path: /adminlogin
            port: http
            scheme: HTTP
          initialDelaySeconds: 240
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: uwsgi
        ports:
        - containerPort: 8081
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /run/bhadra
          name: run
      - env:
        - name: USE_TLS
          value: "false"
        - name: GENERATE_TLS_CERTIFICATE
          value: "false"
        envFrom:
        - configMapRef:
            name: bhadra
        image: <IMAGE>
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            httpHeaders:
            path: /nginx_health
            port: http
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: nginx
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: "2"
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          runAsUser: 1001
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /run/bhadra
          name: run
      dnsPolicy: Default
      imagePullSecrets:
      - name: registry
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: run
---
{{- if .Values.create_initialize }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "12"
    meta.helm.sh/release-name: bhadra
    meta.helm.sh/release-namespace: {{.Values.namespace}}
    moniker.spinnaker.io/application: stage-{{.Values.namespace}}
  generation: 24
  labels:
    app.kubernetes.io/instance: bhadra
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: bhadra
    bhadra.org/component: initializer
    helm.sh/chart: bhadra-1.4.3
  name: bhadra-initializer
  namespace: {{.Values.namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: bhadra
      app.kubernetes.io/name: bhadra
      bhadra.org/component: initializer
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: bhadra
        app.kubernetes.io/name: bhadra
        bhadra.org/component: initializer
    spec:
      containers:
      - command:
        - /entrypoint-initializer.sh
        env:
          - name: DD_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: BHADRA_DB_PASSWORD
                name: bhadra
          - name: DD_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: DD_SECRET_KEY
                name: bhadra
          - name: DD_CREDENTIAL_AES_256_KEY
            valueFrom:
              secretKeyRef:
                key: DD_CREDENTIAL_AES_256_KEY
                name: bhadra
          envFrom:
          - configMapRef:
              name: bhadra
        image: <IMAGE>
        imagePullPolicy: IfNotPresent
        name: initializer
    restartPolicy: Always
{{- end }}
